- Remove algorithms and unneeded complicated mod_hybrid utility subroutines
- Replace dos_* with proximity_dos and josephson_dos
- proximity_zep and josephson_zep utilities when needed
- OMP parallelize the update method. Possible to use block-local subroutines? Or declare pointers to be local? (prehook should be run before splitting)
  But since OMP supports shared memory, should be fine to manipulate 'this' in parallel. Worst case scenario, declare y(32,size(erg),size(loc)).
- Remove *_all from mod_hybrid and all in algorithms/*. However, mod_hybrid is a good name due to imports, so keep it.
- Extend to selfconsistent dos for josephson after adding transparent bc
- Extend mod_spin with spin(3) vector methods, such as spin3_exp_integer and spin3_add_spin3, to simplify the ferromagnet_usadel_equation and spinorbit_usadel_equation implementations
- Extend energy_range to include the possibility of negative energies
- Extend the ferromagnet constructor to allow exchange field initialization from a function
- Use namelists to construct and read config files
- Move spinorbit_* and spinactive_* to submodules when GFortran supports it
- Rename test_foundation to tests
- Modify test_critical to a more general method that can handle at least bilayers and trilayers. Most scriptable might be using an array of class(conductor) objects constructed from an argument --FSFN, followed by arguments like --exchange1=[1,0,0], --phase2=0.5, and --spinorbit4=(1,2). However, easiest might be parsing a namelist.
- Alternative approach: define critical_bilayer and critical_trilayer separately.
- Find a sensible way to append results to a file from critical temp calculations.
- Change test_materials into a dos calculator for general multilayer structures. 
- Improve output routines (inspired by CMake â€” red headers, yellow warnings, green status info, calculate percentage complete)
